//-------------------------------------------------------------------------
//
// FNAFGM FGD V7.0 BY XPERIDIA
//
//-------------------------------------------------------------------------

@include "base.fgd"

@PointClass base(Parentname, Angles) studioprop("models/editor/camera.mdl") = fnafgm_camera : "FNAFGM Camera"
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	locname(string) : "Location name" : : "Name of the location of the camera."
]

@PointClass base(Targetname) iconsprite("editor/logic_relay.vmt") = fnafgm_link : "FNAFGM Link"
[
	input FoxyKnockDoor(void) : "Foxy knocked the door."
	input StartNight(void) : "Start Night event."
	input DoorClosing(integer) : "X door is closing."
	input DoorOpen(integer) : "X door is open."
	input LightOn(integer) : "X light is on."
	input LightOff(integer) : "X light is off."
	input Jumpscared(string) : "Who trigger a jumpscare?"
	input ChangeLastCam(integer) : "Change the last camera."
	output OnNightEnd(void) : "Fired when night ended."
	output OnPowerDown(void) : "Fired when power is depleted."
]

@PointClass base(Targetname) iconsprite("editor/logic_case.vmt") = fnafgm_logic_case_prob :	"FNAFGM Logic Case Prob"
[
	Case01(string) : "Case 01"
	Case02(string) : "Case 02"
	Case03(string) : "Case 03"
	Case04(string) : "Case 04"
	Case05(string) : "Case 05"
	Case06(string) : "Case 06"
	Case07(string) : "Case 07"
	Case08(string) : "Case 08"
	Case09(string) : "Case 09"
	Case10(string) : "Case 10"
	Case11(string) : "Case 11"
	Case12(string) : "Case 12"
	Case13(string) : "Case 13"
	Case14(string) : "Case 14"
	Case15(string) : "Case 15"
	Case16(string) : "Case 16"
	ProbCase01(float) : "Proba Case 01"
	ProbCase02(float) : "Proba Case 02"
	ProbCase03(float) : "Proba Case 03"
	ProbCase04(float) : "Proba Case 04"
	ProbCase05(float) : "Proba Case 05"
	ProbCase06(float) : "Proba Case 06"
	ProbCase07(float) : "Proba Case 07"
	ProbCase08(float) : "Proba Case 08"
	ProbCase09(float) : "Proba Case 09"
	ProbCase10(float) : "Proba Case 10"
	ProbCase11(float) : "Proba Case 11"
	ProbCase12(float) : "Proba Case 12"
	ProbCase13(float) : "Proba Case 13"
	ProbCase14(float) : "Proba Case 14"
	ProbCase15(float) : "Proba Case 15"
	ProbCase16(float) : "Proba Case 16"


	// Inputs
	input PickRandom(void) : "Fires a random OnCase output with at least one connection."
	input Move(string) : "Move an entity to another entity."

	// Outputs
	output OnCase01(void) : "Fired when the input value equals the Case01 value."
	output OnCase02(void) : "Fired when the input value equals the Case02 value."
	output OnCase03(void) : "Fired when the input value equals the Case03 value."
	output OnCase04(void) : "Fired when the input value equals the Case04 value."
	output OnCase05(void) : "Fired when the input value equals the Case05 value."
	output OnCase06(void) : "Fired when the input value equals the Case06 value."
	output OnCase07(void) : "Fired when the input value equals the Case07 value."
	output OnCase08(void) : "Fired when the input value equals the Case08 value."
	output OnCase09(void) : "Fired when the input value equals the Case09 value."
	output OnCase10(void) : "Fired when the input value equals the Case10 value."
	output OnCase11(void) : "Fired when the input value equals the Case11 value."
	output OnCase12(void) : "Fired when the input value equals the Case12 value."
	output OnCase13(void) : "Fired when the input value equals the Case13 value."
	output OnCase14(void) : "Fired when the input value equals the Case14 value."
	output OnCase15(void) : "Fired when the input value equals the Case15 value."
	output OnCase16(void) : "Fired when the input value equals the Case16 value."
]

@PointClass base(Targetname, Angles) studio() = fnafgm_animatronic : "FNAFGM Animatronic"
[
	model(studio) : "Model" : "models/editor/playerstart.mdl" : "The model set here is to help you pose the animatronic on the map. Will only ever be used in game if no model is defined in the gamemode."
	AType(integer) : "Animatronic ID" : 0 : "Which animatronic type to place here. There can only be one of each type on the map! Check the gamemode's code for existing definitions. You can use any ID but please do keep in mind that if you're using something not defined in the gamemode some things might be missing but overall it should work."
	APos(integer) : "Animatronic initial position (camera ID)" : 1 : "Which location relative to camera this is."
	cooldown_0(integer) : "Min cooldown Night 0 (failsafe fallback)" : 10 : "Minimal cooldown time before the animatronic can move. Set to -1 to disable moving."
	maxcooldown_0(integer) : "Max cooldown Night 0 (failsafe fallback)" : 10 : "Maximal cooldown time before the animatronic can move. Set to -1 to disable moving."
	cooldown_1(integer) : "Min cooldown Night 1" : -1 : "Minimal cooldown time before the animatronic can move. Set to -1 to disable moving."
	maxcooldown_1(integer) : "Max cooldown Night 1" : -1 : "Maximal cooldown time before the animatronic can move. Set to -1 to disable moving."
	cooldown_2(integer) : "Min cooldown Night 2" : -1 : "Minimal cooldown time before the animatronic can move. Set to -1 to disable moving."
	maxcooldown_2(integer) : "Max cooldown Night 2" : -1 : "Maximal cooldown time before the animatronic can move. Set to -1 to disable moving."
	cooldown_3(integer) : "Min cooldown Night 3" : 30 : "Minimal cooldown time before the animatronic can move. Set to -1 to disable moving."
	maxcooldown_3(integer) : "Max cooldown Night 3" : 90 : "Maximal cooldown time before the animatronic can move. Set to -1 to disable moving."
	cooldown_4(integer) : "Min cooldown Night 4" : 30 : "Minimal cooldown time before the animatronic can move. Set to -1 to disable moving."
	maxcooldown_4(integer) : "Max cooldown Night 4" : 60 : "Maximal cooldown time before the animatronic can move. Set to -1 to disable moving."
	cooldown_5(integer) : "Min cooldown Night 5" : 16 : "Minimal cooldown time before the animatronic can move. Set to -1 to disable moving."
	maxcooldown_5(integer) : "Max cooldown Night 5" : 30 : "Maximal cooldown time before the animatronic can move. Set to -1 to disable moving."
	cooldown_6(integer) : "Min cooldown Night 6" : 6 : "Minimal cooldown time before the animatronic can move. Set to -1 to disable moving."
	maxcooldown_6(integer) : "Max cooldown Night 6" : 10 : "Maximal cooldown time before the animatronic can move. Set to -1 to disable moving."
]

@PointClass base(Targetname, Angles) studio() = fnafgm_animatronic_point : "FNAFGM Animatronic location point."
[
	model(studio) : "Model" : "models/editor/playerstart.mdl" : "The model set here is to help you pose the animatronic on the map and won't appear in game."
	skin(integer) : "Skin" : 0 : "Skin to apply at this location."
	AType(integer) : "Animatronic ID" : 0 : "For which animatronic this point is for. Only one AType+APos combo can exist at a time."
	APos(integer) : "Animatronic position (camera ID)" : 1 : "Which location relative to camera this is. Only one AType+APos combo can exist at a time."
	flexes(string) : "Flexes" : : "Flexes to apply at this location. Format like this: flex:weight|flex:weight|flex:weight"
	animation(string) : "Animation" : : "Name of the animation to play at this location."
]

@PointClass base(PlayerClass, Angles) studio("models/editor/playerstart.mdl") = fnafgm_teamanimatronics_start : "Spawn point for the animatronic team"
[
]

@PointClass base(Targetname, Angles, EnableDisable) studio("models/props_lab/keypad.mdl") = fnafgm_keypad : "FNAFGM KeyPad"
[
	Password(string) : "Numerical password (8 digits max)"
	StartErrored(choices) : "Start Errored" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input EnableError(void) : "Make the keypad always error."
	input DisableError(void) : "Make the keypad normal."
	// Outputs
	output OnPressed(void) : "Fired when the button is pressed."
	output OnCorrectPassword(void) : "Fired when the correct code has been input."
	output OnBadPassword(void) : "Fired when a wrong code has been input."
]
